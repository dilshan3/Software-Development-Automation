
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.myprojcet.sdaproject.Component2;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author HP
 */
public class GeneratorUi extends javax.swing.JFrame {

    /**
     * Creates new form GeneratorUi
     */
    private JThread j1;
    private List<Relationship> reList;
    private static String filePath;
    private List<String> classes = new ArrayList<>();
     
    public GeneratorUi() throws IOException, InterruptedException{
        
        filePath =  Index.path;
        initComponents();
        initiateUI();
        successLbl.setVisible(false);
        generateBtn.setVisible(false);
        flowClassSelector.setVisible(false);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        classCheck = new javax.swing.JCheckBox();
        objectCheck = new javax.swing.JCheckBox();
        eRCheck = new javax.swing.JCheckBox();
        flowCheck = new javax.swing.JCheckBox();
        generateBtn = new javax.swing.JButton();
        flowClassSelector = new java.awt.Choice();
        progress = new javax.swing.JProgressBar();
        successLbl = new javax.swing.JLabel();

        jLabel1.setText("jLabel1");

        jPanel1.setPreferredSize(new java.awt.Dimension(342, 251));

        jLabel2.setText("Select diagrams required");

        classCheck.setText("Class Diagram");
        classCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                classCheckActionPerformed(evt);
            }
        });

        objectCheck.setText("Object Diagram");
        objectCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                objectCheckActionPerformed(evt);
            }
        });

        eRCheck.setText("ER Diagram");
        eRCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eRCheckActionPerformed(evt);
            }
        });

        flowCheck.setText("Flow Diagram");
        flowCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                flowCheckActionPerformed(evt);
            }
        });

        generateBtn.setText("Generate");
        generateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(classCheck)
                                .addGap(45, 45, 45)
                                .addComponent(objectCheck)
                                .addGap(50, 50, 50)
                                .addComponent(eRCheck)
                                .addGap(59, 59, 59)
                                .addComponent(flowCheck))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(114, 114, 114)
                        .addComponent(generateBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 417, Short.MAX_VALUE)
                        .addGap(17, 17, 17)))
                .addGap(77, 77, 77))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                    .addContainerGap(31, Short.MAX_VALUE)
                    .addComponent(flowClassSelector, javax.swing.GroupLayout.PREFERRED_SIZE, 549, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(33, Short.MAX_VALUE)))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(classCheck)
                    .addComponent(objectCheck)
                    .addComponent(eRCheck)
                    .addComponent(flowCheck))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 142, Short.MAX_VALUE)
                .addComponent(generateBtn))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                    .addContainerGap(115, Short.MAX_VALUE)
                    .addComponent(flowClassSelector, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(44, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 625, Short.MAX_VALUE)
            .addComponent(progress, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(successLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                .addComponent(successLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(progress, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void generateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateBtnActionPerformed

        
        Generator gen = new Generator();
        
        if(classCheck.isSelected() || objectCheck.isSelected() || eRCheck.isSelected() || flowCheck.isSelected())
        {
            
            if(classCheck.isSelected()){

                try {
                    gen.generateClassDiagram(reList);
                } catch (IOException ex) {
                    Logger.getLogger(GeneratorUi.class.getName()).log(Level.SEVERE, null, ex);
                }

            }
            if(objectCheck.isSelected()){

                try {
                    gen.generateObjectDiagram(reList);
                } catch (IOException ex) {
                    Logger.getLogger(GeneratorUi.class.getName()).log(Level.SEVERE, null, ex);
                }

            }
            if(eRCheck.isSelected()){

                try {
                    gen.generateERDiagram(reList);
                } catch (IOException ex) {
                    Logger.getLogger(GeneratorUi.class.getName()).log(Level.SEVERE, null, ex);
                }

            }
            if(flowCheck.isSelected()){
            
                try {
                    gen.generateFlowDiagram(reList, flowClassSelector.getSelectedItem());
                } catch (IOException ex) {
                    Logger.getLogger(GeneratorUi.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        
            j1 = new JThread(progress, successLbl);
            j1.start();
        }
        
    }//GEN-LAST:event_generateBtnActionPerformed

    private void flowCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_flowCheckActionPerformed
        
        if(!generateBtn.isVisible()){
            generateBtn.setVisible(true);
        }
        
        if(flowCheck.isSelected()){         
            flowClassSelector.setVisible(true);
        }
    }//GEN-LAST:event_flowCheckActionPerformed

    private void classCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_classCheckActionPerformed
        if(!generateBtn.isVisible()){
            generateBtn.setVisible(true);
        }
        
        if(flowCheck.isSelected()){         
            flowClassSelector.setVisible(true);
        }
    }//GEN-LAST:event_classCheckActionPerformed

    private void objectCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_objectCheckActionPerformed
        if(!generateBtn.isVisible()){
            generateBtn.setVisible(true);
        }
        
        if(flowCheck.isSelected()){         
            flowClassSelector.setVisible(true);
        }
    }//GEN-LAST:event_objectCheckActionPerformed

    private void eRCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eRCheckActionPerformed
        if(!generateBtn.isVisible()){
            generateBtn.setVisible(true);
        }
        
        if(flowCheck.isSelected()){         
            flowClassSelector.setVisible(true);
        }
    }//GEN-LAST:event_eRCheckActionPerformed

    private void initiateUI() throws IOException, InterruptedException{     
        
        String command = "python C:\\Users\\HP\\Documents\\CDAPProject\\testRelationshipGen.py "+ filePath;
        Process p = Runtime.getRuntime().exec(command);
        
        p.waitFor();
        
        initialiseRelationships();        
        
        fillClassDropDown();
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GeneratorUi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GeneratorUi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GeneratorUi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GeneratorUi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
       
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new GeneratorUi().setVisible(true);
                } catch (IOException ex) {
                    Logger.getLogger(GeneratorUi.class.getName()).log(Level.SEVERE, null, ex);
                } catch (InterruptedException ex) {
                    Logger.getLogger(GeneratorUi.class.getName()).log(Level.SEVERE, null, ex);
                }
                
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox classCheck;
    private javax.swing.JCheckBox eRCheck;
    private javax.swing.JCheckBox flowCheck;
    private java.awt.Choice flowClassSelector;
    private javax.swing.JButton generateBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JCheckBox objectCheck;
    private javax.swing.JProgressBar progress;
    private javax.swing.JLabel successLbl;
    // End of variables declaration//GEN-END:variables

    //Initiates the identified relationship objects
    public void initialiseRelationships(){
        
        File file = new File(filePath);
        Scanner sc;
        List<String> input = new ArrayList<>();
                     
        try {
            sc = new Scanner(file);
                
            while(sc.hasNextLine()){
                
                input.add(sc.nextLine());
            }
            sc.close();    
        } catch (FileNotFoundException ex) {
                
            Logger.getLogger(Index.class.getName()).log(Level.SEVERE, null, ex);
                
        }
        
        RelationshipMapper mapper = new RelationshipMapper();
        reList = mapper.mapToXl(input);
        
        
    }
    
    //Fills the drop down options with classes for the flow-diagram
    public void fillClassDropDown(){
    
        for(Relationship rel: reList){
        
            if(classes.contains(rel.getClassa()) && !classes.contains(rel.getClassb())){
                
                classes.add(rel.getClassb());
            }
            else if(!classes.contains(rel.getClassa()) && classes.contains(rel.getClassb())){
                
                 classes.add(rel.getClassa());
                 
            }
            else if(!classes.contains(rel.getClassa()) && !classes.contains(rel.getClassb())){
                
                 classes.add(rel.getClassa());
                 classes.add(rel.getClassb());
            }
        }
        
        
        for(int i = 0; i < classes.size(); i++){
            
            flowClassSelector.add(classes.get(i));
        }
    }
}
