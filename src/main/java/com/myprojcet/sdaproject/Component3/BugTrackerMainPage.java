/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.myprojcet.sdaproject.Component3;
import com.myprojcet.sdaproject.Component3.Corrections;
import java.awt.Image;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.sql.Connection;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.ConcurrentModificationException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author Sasini Randunuge - IT17146470 This contains the codes to identify
 * different bug categories in the provided java codes.
 */
public class BugTrackerMainPage extends javax.swing.JFrame {

    //Variable to store the path name of the user selected path.
    private String selectedFilePath;

    //Variable to store the error count.
    public int errors = 0;

    //Variable to store the line numbers of the code.
    public int loc = 0;

    /**
     * Creates new form BugTrackerMainPage
     */
    public BugTrackerMainPage() {
        initComponents();
    }

    public BugTrackerMainPage(String selectedFilePath) {
        this.selectedFilePath = selectedFilePath;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooser1 = new javax.swing.JFileChooser();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        filePath = new javax.swing.JTextField();
        jButton3 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea3 = new javax.swing.JTextArea();
        jButton4 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setForeground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Browse the file and select the Track Bugs button to track bugs. Select Refresh to clear data.");

        jButton1.setText("Browse File");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTextArea1.setEditable(false);
        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jTextArea2.setEditable(false);
        jTextArea2.setColumns(20);
        jTextArea2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jTextArea2.setRows(5);
        jScrollPane2.setViewportView(jTextArea2);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setText("Error Log");

        jButton2.setText("Track Bugs");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        filePath.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filePathActionPerformed(evt);
            }
        });

        jButton3.setText("Refresh");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Bug Tracker");

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel5.setText("Related Suggestions");

        jTextArea3.setEditable(false);
        jTextArea3.setColumns(20);
        jTextArea3.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jTextArea3.setRows(5);
        jScrollPane3.setViewportView(jTextArea3);

        jButton4.setText("Generate Summary");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(filePath))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 871, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(93, 93, 93)
                        .addComponent(jLabel2)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 17, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 418, Short.MAX_VALUE)
                            .addComponent(jScrollPane3))
                        .addContainerGap(20, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel5)
                        .addGap(153, 153, 153))))
            .addGroup(layout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(209, 209, 209)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addComponent(jButton4)
                .addGap(78, 78, 78))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(43, 43, 43)
                .addComponent(jLabel4)
                .addGap(2, 2, 2)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(filePath, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 503, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * This method is used to track the return statement count in the code. For
     * one method, there should be only one return statement. This
     * findReturnStatements() method detects the number of methods by using the
     * curly braces. Then the return statements for a single method is
     * calculated. If there are multiple return statements in a single method,
     * the program will track it as an error.
     */
    public void findReturnStatements() {

        //This is the all lines of code which is selected by the user.
        List<String> result = new ArrayList<>();

        //The result is stored in an array of words.
        String[] words = null;

        //Error count inside this method.
        int errorCount = 0;

        //Method counter.
        int methodCount = 0;

        //Return statement counter.
        int returnCount = 0;

        //This holds the line number of the code.
        int lineNum = 0;

        //Reads the all line in the selected code and stores it in the result variable.
        try {
            result = Files.readAllLines(Paths.get(selectedFilePath));

        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }

        //eleminating the empty lines and the comments.
        for (java.util.Iterator<String> iterator = result.iterator(); iterator.hasNext();) {
            String v = iterator.next();
            if (v.trim().isEmpty() || v.trim().startsWith("/*") || v.trim().endsWith("*/") || v.trim().startsWith("//")
                    || v.trim().startsWith("*") || v.trim().startsWith("import")) {
                iterator.remove();
            }
        }

        for (String s : result) {

            //After every line, the line number is incremented by 1.
            lineNum++;

            //Words are splitted by the space.
            words = s.split(" ");
            System.out.println(s);

            //iterating through the lines
            for (String word : words) {
//				if(word.contains("class")) {
//					methodCount-=1;
//				}
//				
                //eleminating the main method when counting methods
                if (word.contains("main")) {
                    methodCount -= 1;
                }

                //tracking methods by the brackets
                if (word.contains("){")) {
                    methodCount += 1;
                }

                //track the method by the brackets to identify the method count
                if (word.contains("}")) {
                    //methodCount = 1;
                    char[] cReadline = word.toCharArray();
                    int iReadLineLength = cReadline.length;

                    for (int i = 0; i <= iReadLineLength; i++) {
                        try {

                            if (cReadline[i] == ')' && cReadline[i + 1] == ' ' && cReadline[i + 2] == '{') {
                                methodCount = methodCount - 1;
                            }
                        } catch (ArrayIndexOutOfBoundsException e) {

                        }
                    }
                }
                //won't change the method count in those scenarios
                if (word.contains("if")) {
                    methodCount = methodCount;
                }

                if (word.contains("else if")) {
                    methodCount = methodCount;
                }

                if (word.contains("else")) {
                    methodCount = methodCount;
                }

                if (word.contains("switch")) {
                    methodCount = methodCount;
                }

                //tracking the return statements in the method
                if (word.contains("return")) {
                    returnCount += 1;
                    //this.jTextArea2.append(s+"Line number: "+lineNum+"\n");
                }

            }

        }
        System.out.println(methodCount);
        System.out.println(returnCount);
        //this.jTextArea2.append(" "+methodCount);
        //this.jTextArea2.append(" "+returnCount);

        if (methodCount == returnCount) {
            System.out.println("");
        } else if (methodCount > 0 && returnCount == 0) {
            System.out.println("");
        } else if (methodCount < returnCount) {
            if (methodCount > 0) {
                //Do not show anything
            } else {
                errors++;
                System.out.println("Multiple return statements occured");
                this.jTextArea2.append("* Multipe return statements occured...");
                //this.jTextArea2.append(" "+methodCount);
                //this.jTextArea2.append(" "+returnCount);
                //this.jTextArea2.append(s);
                this.jTextArea2.append("\n");
                this.jTextArea3.append("Try removing the additional return statements");
            }
        }
    }

    /**
     * This method detects that the user have passed null values or the
     * incompatible values for the parse methods.
     */
    public void numberFormat() {
        //This is the all lines of code which is selected by the user.
        List<String> result = new ArrayList<>();

        //The result is stored in an array of words.
        String[] words = null;

        //Error count inside this method.
        int errorCount = 0;

        //This holds the line number of the code.
        int lineNum = 0;

        //Reads the all line in the selected code and stores it in the result variable.
        try {
            result = Files.readAllLines(Paths.get(selectedFilePath));

        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }

        //eleminating the empty lines and the comments
        for (java.util.Iterator<String> iterator = result.iterator(); iterator.hasNext();) {
            String v = iterator.next();
            if (v.trim().isEmpty() || v.trim().startsWith("/*") || v.trim().endsWith("*/") || v.trim().startsWith("//")
                    || v.trim().startsWith("*") || v.trim().startsWith("import")) {
                iterator.remove();
            }
        }

        for (String s : result) {
            //After every line, the line number is incremented by 1.
            lineNum++;

            //Words are splitted by the space.
            words = s.split(" ");
            System.out.println(s);

            //iterating through the lines
            for (String word : words) {
                //checking for parse method
                if (word.contains("parseInt")) {
                    int ct = 0;
                    for (int i = 0; i < s.length(); i++) {
                        Boolean flag = Character.isDigit(s.charAt(38));
                        if (flag) {
                            System.out.println("'" + s.charAt(i) + "' is a number"+i);
                            System.out.println("No issue...");
                        } else {
                            System.out.println("'" + s.charAt(i) + "' is a letter"+i);
                            System.out.println("Number formatting");
                            ct = ct + 1;
                            System.out.println(ct);

                            if (ct == 1) {
                                errors++;
                                this.jTextArea2.append("* Number formatting error occured in line : "+lineNum);
                                this.jTextArea2.append("\n");
                                this.jTextArea3.append("* Try giving an integer value for line : "+lineNum+"\n");
                                this.jTextArea2.append("\n");
                            }
                        }
                    }

//                    char[] cReadline = word.toCharArray();
//                    int iReadLineLength = cReadline.length;
//
//                    for (int i = 0; i <= iReadLineLength; i++) {
//                        try {
//                            //check that if null occurs
//                            if (cReadline[i] == 't' && cReadline[i + 1] == '(' && cReadline[i + 2] == 'n' && cReadline[i + 3] == 'u' && cReadline[i + 4] == 'l' && cReadline[i + 5] == 'l') {
//                                errors++;
//                                System.out.println("Null value cannot be parsed to Integer. Line " + lineNum);
//                                System.out.println(s);
//                                jTextArea2.append("* Null value cannot be parsed to Integer. Line " + lineNum + "\n");
//                                jTextArea2.append(s + "\n");
//                                jTextArea2.append("\n");
//                                jTextArea3.append("Try passing Integer value to the parse method in line number :" + lineNum + "\n");
//                            }
//
//                            if (cReadline[i] == 't' && cReadline[i + 1] == '(' && cReadline[i + 2] == '"' && cReadline[i + 3] == '"' && cReadline[i + 4] == ')') {
//                                errors++;
//                                System.out.println("Null value cannot be parsed to Integer. Line " + lineNum);
//                                System.out.println(s);
//                                jTextArea2.append("* Null value cannot be parsed to Integer. Line " + lineNum + "\n");
//                                jTextArea2.append(s + "\n");
//                                jTextArea2.append("\n");
//                                jTextArea3.append("Try passing Integer value to the parse method in line number :" + lineNum + "\n");
//                            } else if (cReadline[i] == 't' && cReadline[i + 1] == '(' && cReadline[i + 2] == '"') {
//                                errors++;
//                                System.out.println("A String cannot be parsed to Integer. Line " + lineNum);
//                                System.out.println(s);
//                                jTextArea2.append("* A String cannot be parsed to Integer. Line " + lineNum + "\n");
//                                jTextArea2.append(s + "\n");
//                                jTextArea2.append("\n");
//                                jTextArea3.append("Try passing Integer value to the parse method in line number :" + lineNum + "\n");
//
//                                Boolean flag = Character.isDigit(s.charAt(cReadline[i+4]));
//                                if (flag) {
//                                    System.out.println("'" + s.charAt(cReadline[i+4]) + "' is a number"+i);
//                                } else {
//                                    System.out.println("'" + s.charAt(cReadline[i+4]) + "' is a letter"+i);
//                                }
//                            }
//
//                        } catch (ArrayIndexOutOfBoundsException e) {
//
//                        }
//                    }
                }
                //searching the parse method
                if (word.contains("parseLong")) {

                    char[] cReadline = word.toCharArray();
                    int iReadLineLength = cReadline.length;

                    for (int i = 0; i <= iReadLineLength; i++) {
                        try {
//		 					if(cReadline[i] =='a' && cReadline[i+1] =='(' && cReadline[i+2] =='n') {
//		 						errorCount = errorCount+1;
//		 						System.out.println("A String cannot be parsed to Integer. Line "+lineNum);
//		 					}
//		 					if(cReadline[i] =='a' && cReadline[i+1] =='(' && cReadline[i+2] =='n' && cReadline[i+3] =='.' || cReadline[i+4] =='.' || cReadline[i+5] =='.') {
//		 						errorCount = errorCount+1;
//		 						System.out.println("A String cannot be parsed to Integer. Line "+lineNum);
//		 					}

                            //searching for null occurences
                            if (cReadline[i] == 'g' && cReadline[i + 1] == '(' && cReadline[i + 2] == 'n' && cReadline[i + 3] == 'u' && cReadline[i + 4] == 'l' && cReadline[i + 5] == 'l') {
                                errors++;
                                System.out.println("Null value cannot be parsed to Long. Line " + lineNum);
                                System.out.println(s);
                                jTextArea2.append("* Null value cannot be parsed to Long. Line " + lineNum + "\n");
                                jTextArea2.append(s + "\n");
                                jTextArea2.append("\n");
                                jTextArea3.append("* Try passing Long value to the parse method in line number :" + lineNum + "\n");
                                jTextArea3.append("\n");
                            }

                            if (cReadline[i] == 'g' && cReadline[i + 1] == '(' && cReadline[i + 2] == '"' && cReadline[i + 3] == '"' && cReadline[i + 4] == ')') {
                                errors++;
                                System.out.println("Null value cannot be parsed to Long. Line " + lineNum);
                                jTextArea2.append("* Null value cannot be parsed to Long. Line " + lineNum + "\n");
                                jTextArea2.append(s + "\n");
                                jTextArea2.append("\n");
                                jTextArea3.append("* Try passing Long value to the parse method in line number :" + lineNum + "\n");
                                jTextArea3.append("\n");
                            } else if (cReadline[i] == 't' && cReadline[i + 1] == '(' && cReadline[i + 2] == '"') {
                                errors++;
                                System.out.println("A String cannot be parsed to Long. Line " + lineNum);
                                System.out.println(s);
                                jTextArea2.append("* A String cannot be parsed to Long. Line " + lineNum + "\n");
                                jTextArea2.append(s + "\n");
                                jTextArea2.append("\n");
                                jTextArea3.append("* Try passing Long value to the parse method in line number :" + lineNum + "\n");
                                jTextArea3.append("\n");
                            }

                        } catch (ArrayIndexOutOfBoundsException e) {

                        }
                    }

                }
                //searching for parse method        
                if (word.contains("parseDouble")) {

                    char[] cReadline = word.toCharArray();
                    int iReadLineLength = cReadline.length;

                    for (int i = 0; i <= iReadLineLength; i++) {
                        try {
                            if (cReadline[i] == 't' && cReadline[i + 1] == '(' && cReadline[i + 2] == 'n') {
                                errors++;
                                System.out.println("A String cannot be parsed to Double. Line " + lineNum);
                                jTextArea2.append("* A String cannot be parsed to Double. Line " + lineNum + "\n");
                                jTextArea2.append(s + "\n");
                                jTextArea2.append("\n");
                                jTextArea3.append("* Try passing Double value to the parse method in line number :" + lineNum + "\n");
                                jTextArea3.append("\n");
                            } else if (cReadline[i] == 't' && cReadline[i + 1] == '(' && cReadline[i + 2] == 'n' && cReadline[i + 3] == '.' || cReadline[i + 4] == '.' || cReadline[i + 5] == '.') {
                                errorCount = errorCount + 1;
                                //System.out.println("A String cannot be parsed to Double. Line "+lineNum);
                            }

                            //searching for null occurences
                            if (cReadline[i] == 'g' && cReadline[i + 1] == '(' && cReadline[i + 2] == '"' && cReadline[i + 3] == '"' && cReadline[i + 4] == ')') {
                                errors++;
                                System.out.println("Null value cannot be parsed to Double. Line " + lineNum);
                                jTextArea2.append("* Null value cannot be parsed to Double. Line " + lineNum + "\n");
                                jTextArea2.append(s + "\n");
                                jTextArea2.append("\n");
                                jTextArea3.append("* Try passing Double value to the parse method in line number :" + lineNum + "\n");
                                jTextArea3.append("\n");
                            } else if (cReadline[i] == 't' && cReadline[i + 1] == '(' && cReadline[i + 2] == '"') {
                                errors++;
                                System.out.println("A String cannot be parsed to Double. Line " + lineNum);
                                System.out.println(s);
                                jTextArea2.append("* A String cannot be parsed to Double. Line " + lineNum + "\n");
                                jTextArea2.append(s + "\n");
                                jTextArea2.append("\n");
                                jTextArea3.append("* Try passing Double value to the parse method in line number :" + lineNum + "\n");
                                jTextArea3.append("\n");
                            }
                        } catch (ArrayIndexOutOfBoundsException e) {

                        }
                    }

                }

            }
        }

    }

    /**
     * This method checks if there are any incompatible values given to the
     * array in the code.
     */
    public void arrStore() {
        //This is the all lines of code which is selected by the user.
        List<String> result = new ArrayList<>();

        //The result is stored in an array of words.
        String[] words = null;

        //Error count inside this method.
        int errorCount = 0;

        //This holds the line number of the code.
        int lineNum1 = 0;

        int lineNum2 = 0;
        int lineNum3 = 0;
        int dcount = 0;
        int icount = 0;
        int strCount = 0;

        //Reads the all line in the selected code and stores it in the result variable.
        try {
            result = Files.readAllLines(Paths.get(selectedFilePath));

        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }

        //eleminating the empty lines and the comments
        for (java.util.Iterator<String> iterator = result.iterator(); iterator.hasNext();) {
            String v = iterator.next();
            if (v.trim().isEmpty() || v.trim().startsWith("/*") || v.trim().endsWith("*/") || v.trim().startsWith("//")
                    || v.trim().startsWith("*") || v.trim().startsWith("import")) {
                iterator.remove();
            }
        }

        List<String> d = new ArrayList<>();
        String[] l = null;
        //int count = 0;

        try {
            for (String s : result) {
                lineNum1++;
                words = s.split(" ");
                System.out.println(s);

                //tracking the datatype 
                if (s.contains("Object[]") && s.contains("Integer[")) {
                    l = s.split(" ");
                    for (int x = 0; x < l.length - 1; x++) {
                        d.add(l[x]);
                    }
                    try {
                        //getting the values of the array
                        int ind = d.indexOf("=") - 1;
                        System.out.println(ind);
                        System.out.println(d.get(d.indexOf("=") - 1));

                    } catch (IndexOutOfBoundsException e) {

                    }
                }

                try {
                    //checking the array elements are compatible with the datatype or not
                    if (s.contains(d.get(d.indexOf("=") - 1))) {
                        //count++;
                        //System.out.println(count);

                        if (s.contains(".")) {
                            //System.out.println("Array Store Exception occured in line "+lineNum1);
                            //System.out.println("Cannot pass a double value to integer");
                            errors++;
                            this.jTextArea2.append("* Array Store error occured in line  :" + lineNum1 + "\n");
                            this.jTextArea2.append(s + "\n");
                            //this.jTextArea2.append("Cannot pass a double value to integer \n");
                            this.jTextArea2.append("\n");
                            jTextArea3.append("* Try passing Integer value to the array in line number :" + lineNum1 + "\n");
                            jTextArea3.append("\n");
                        }

                        if (s.contains("\"")) {
                            //System.out.println("Array Store Exception occured in line "+lineNum1);
                            //System.out.println("Cannot pass a string value to integer");
                            errors++;
                            this.jTextArea2.append("* Array Store error occured in line  :" + lineNum1 + "\n");
                            this.jTextArea2.append(s + "\n");
                            //this.jTextArea2.append("Cannot pass a string value to integer \n");
                            this.jTextArea2.append("\n");
                            jTextArea3.append("* Try passing Integer value to the array in line number :" + lineNum1 + "\n");
                            jTextArea3.append("\n");
                        }
                        
                        if (s.contains("\'")) {
                            //System.out.println("Array Store Exception occured in line "+lineNum1);
                            //System.out.println("Cannot pass a string value to integer");
                            errors++;
                            this.jTextArea2.append("* Array Store error occured in line  :" + lineNum1 + "\n");
                            this.jTextArea2.append(s + "\n");
                            //this.jTextArea2.append("Cannot pass a string value to integer \n");
                            this.jTextArea2.append("\n");
                            jTextArea3.append("* Try passing Integer value to the array in line number :" + lineNum1 + "\n");
                            jTextArea3.append("\n");
                        }

                        if (s.contains("L")) {
                            //System.out.println("Array Store Exception occured in line "+lineNum1);
                            //System.out.println("Cannot pass a string value to integer");
                            errors++;
                            this.jTextArea2.append("* Array Store error occured in line  :" + lineNum1 + "\n");
                            this.jTextArea2.append(s + "\n");
                            //this.jTextArea2.append("Cannot pass a string value to integer \n");
                            this.jTextArea2.append("\n");
                            jTextArea3.append("* Try passing Integer value to the array in line number :" + lineNum1 + "\n");
                            jTextArea3.append("\n");
                        }
                    }
                } catch (ArrayIndexOutOfBoundsException e) {

                }

            }
        } catch (ConcurrentModificationException e) {

        }

    }

    public void arrStore2() {
        List<String> result = new ArrayList<>();
        String[] words = null;
        int lineNum1 = 0;

        try {
            result = Files.readAllLines(Paths.get(selectedFilePath));

        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }

        for (java.util.Iterator<String> iterator = result.iterator(); iterator.hasNext();) {
            String v = iterator.next();
            if (v.trim().isEmpty() || v.trim().startsWith("/*") || v.trim().endsWith("*/") || v.trim().startsWith("//")
                    || v.trim().startsWith("*") || v.trim().startsWith("import") || v.trim().startsWith("#include") || v.trim().startsWith("using namespace")) {
                iterator.remove();
            }
        }

        List<String> d = new ArrayList<>();
        String[] l = null;
        int count = 0;
        int quotes = 0;

        try {
            for (String s : result) {
                lineNum1++;
                words = s.split(" ");
                System.out.println(s);

                if (s.contains("Object[]") && s.contains("Double[")) {
                    l = s.split(" ");
                    for (int x = 0; x < l.length - 1; x++) {
                        d.add(l[x]);
                    }
                    try {
                        int ind = d.indexOf("=") - 1;
                        //System.out.println(ind);
                        //System.out.println(d.get(d.indexOf("=")-1));

                    } catch (IndexOutOfBoundsException e) {

                    }
                }

                try {
                    if (s.contains(d.get(d.indexOf("=") - 1))) {
                        count++;
                        //System.out.println(count);
                        if (count >= 2) {
                            if (s.contains(".")) {

                            } else {
                                //System.out.println("Array Store Exception occured in line "+lineNum1);
                                //System.out.println("Cannot pass a non-double value to double");
                                errors++;
                                this.jTextArea2.append("* Array Store error occured in line  :" + lineNum1 + "\n");
                                this.jTextArea2.append(s + "\n");
                                //this.jTextArea2.append("Cannot pass a non-double value to double \n");
                                this.jTextArea2.append("\n");
                                jTextArea3.append("* Try passing Double value to the array in line number :" + lineNum1 + "\n");
                                jTextArea3.append("\n");
                            }

                            if (s.contains("\"")) {
                                quotes++;

                                if (quotes == 2) {
                                    //System.out.println("Array Store Exception occured in line "+lineNum1);
                                    //System.out.println("Cannot pass a string value to double");
                                    errors++;
                                    this.jTextArea2.append("* Array Store error occured in line :" + lineNum1 + "\n");
                                    this.jTextArea2.append(s + "\n");
                                    //this.jTextArea2.append("Cannot pass a string value to double \n");
                                    this.jTextArea2.append("\n");
                                    jTextArea3.append("* Try passing Double value to the array in line number :" + lineNum1 + "\n");
                                    jTextArea3.append("\n");
                                }
                            }
                        }
                    }
                } catch (ArrayIndexOutOfBoundsException e) {

                }

            }
        } catch (ConcurrentModificationException e) {

        }
    }

    public void arrStore3() {
        List<String> result = new ArrayList<>();
        String[] words = null;
        int lineNum1 = 0;

        try {
            result = Files.readAllLines(Paths.get(selectedFilePath));

        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }

        for (java.util.Iterator<String> iterator = result.iterator(); iterator.hasNext();) {
            String v = iterator.next();
            if (v.trim().isEmpty() || v.trim().startsWith("/*") || v.trim().endsWith("*/") || v.trim().startsWith("//")
                    || v.trim().startsWith("*") || v.trim().startsWith("import") || v.trim().startsWith("#include") || v.trim().startsWith("using namespace")) {
                iterator.remove();
            }
        }

        List<String> d = new ArrayList<>();
        String[] l = null;
        int count = 0;
        int quotes = 0;

        try {
            for (String s : result) {
                lineNum1++;
                words = s.split(" ");
                System.out.println(s);

                if (s.contains("Object[]") && s.contains("String[")) {
                    l = s.split(" ");
                    for (int x = 0; x < l.length - 1; x++) {
                        d.add(l[x]);
                    }
                    try {
                        int ind = d.indexOf("=") - 1;
                        //System.out.println(ind);
                        //System.out.println(d.get(d.indexOf("=")-1));

                    } catch (IndexOutOfBoundsException e) {

                    }
                }

                try {
                    if (s.contains(d.get(d.indexOf("=") - 1))) {
                        count++;
                        //System.out.println(count);
                        if (count >= 2) {
                            if (!s.contains("\"")) {
                                //System.out.println("Array Store Exception occured in line "+lineNum1);
                                //System.out.println("Cannot pass a non-string value to string");
                                errors++;
                                this.jTextArea2.append("* Array Store error occured in line :" + lineNum1 + "\n");
                                this.jTextArea2.append(s + "\n");
                                //this.jTextArea2.append("Cannot pass a non-string value to string \n");
                                this.jTextArea2.append("\n");
                                jTextArea3.append("* Try passing String value to the array in line number :" + lineNum1 + "\n");
                                jTextArea3.append("\n");
                            }
                        }
                    }
                } catch (ArrayIndexOutOfBoundsException e) {

                }

            }
        } catch (ConcurrentModificationException e) {

        }

    }

    public void arrStore4() {
        List<String> result = new ArrayList<>();
        String[] words = null;
        int lineNum1 = 0;

        try {
            result = Files.readAllLines(Paths.get(selectedFilePath));

        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }

        for (java.util.Iterator<String> iterator = result.iterator(); iterator.hasNext();) {
            String v = iterator.next();
            if (v.trim().isEmpty() || v.trim().startsWith("/*") || v.trim().endsWith("*/") || v.trim().startsWith("//")
                    || v.trim().startsWith("*") || v.trim().startsWith("import") || v.trim().startsWith("#include") || v.trim().startsWith("using namespace")) {
                iterator.remove();
            }
        }

        List<String> d = new ArrayList<>();
        String[] l = null;
        int count = 0;
        int quotes = 0;

        try {
            for (String s : result) {
                lineNum1++;
                words = s.split(" ");
                System.out.println(s);

                if (s.contains("Object[]") && s.contains("Float[")) {
                    l = s.split(" ");
                    for (int x = 0; x < l.length - 1; x++) {
                        d.add(l[x]);
                    }
                    try {
                        int ind = d.indexOf("=") - 1;
                        //System.out.println(ind);
                        //System.out.println(d.get(d.indexOf("=")-1));

                    } catch (IndexOutOfBoundsException e) {

                    }
                }

                try {
                    if (s.contains(d.get(d.indexOf("=") - 1))) {
                        count++;
                        //System.out.println(count);
                        if (count >= 2) {
                            if (s.contains(".")) {

                            } else {
                                //System.out.println("Array Store Exception occured in line "+lineNum1);
                                //System.out.println("Cannot pass a non-double value to double");
                                errors++;
                                this.jTextArea2.append("* Array Store error occured in line  :" + lineNum1 + "\n");
                                this.jTextArea2.append(s + "\n");
                                //this.jTextArea2.append("Cannot pass a non-double value to double \n");
                                this.jTextArea2.append("\n");
                                jTextArea3.append("* Try passing Double value to the array in line number :" + lineNum1 + "\n");
                                jTextArea3.append("\n");
                            }

                            if (s.contains("\"")) {
                                quotes++;

                                if (quotes == 2) {
                                    //System.out.println("Array Store Exception occured in line "+lineNum1);
                                    //System.out.println("Cannot pass a string value to double");
                                    errors++;
                                    this.jTextArea2.append("* Array Store error occured in line :" + lineNum1 + "\n");
                                    this.jTextArea2.append(s + "\n");
                                    //this.jTextArea2.append("Cannot pass a string value to double \n");
                                    this.jTextArea2.append("\n");
                                    jTextArea3.append("* Try passing Double value to the array in line number :" + lineNum1 + "\n");
                                    jTextArea3.append("\n");
                                }
                            }
                        }
                    }
                } catch (ArrayIndexOutOfBoundsException e) {

                }

            }
        } catch (ConcurrentModificationException e) {

        }
    }

    /**
     * This method checks if there are any incompatible values given to the
     * array in the code.
     */
    public void arrStore5() {
        //This is the all lines of code which is selected by the user.
        List<String> result = new ArrayList<>();

        //The result is stored in an array of words.
        String[] words = null;

        //Error count inside this method.
        int errorCount = 0;

        //This holds the line number of the code.
        int lineNum1 = 0;

        int lineNum2 = 0;
        int lineNum3 = 0;
        int dcount = 0;
        int icount = 0;
        int strCount = 0;

        //Reads the all line in the selected code and stores it in the result variable.
        try {
            result = Files.readAllLines(Paths.get(selectedFilePath));

        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }

        //eleminating the empty lines and the comments
        for (java.util.Iterator<String> iterator = result.iterator(); iterator.hasNext();) {
            String v = iterator.next();
            if (v.trim().isEmpty() || v.trim().startsWith("/*") || v.trim().endsWith("*/") || v.trim().startsWith("//")
                    || v.trim().startsWith("*") || v.trim().startsWith("import")) {
                iterator.remove();
            }
        }

        List<String> d = new ArrayList<>();
        String[] l = null;
        //int count = 0;

        try {
            for (String s : result) {
                lineNum1++;
                words = s.split(" ");
                System.out.println(s);

                //tracking the datatype 
                if (s.contains("Object[]") && s.contains("Long[")) {
                    l = s.split(" ");
                    for (int x = 0; x < l.length - 1; x++) {
                        d.add(l[x]);
                    }
                    try {
                        //getting the values of the array
                        int ind = d.indexOf("=") - 1;
                        System.out.println(ind);
                        System.out.println(d.get(d.indexOf("=") - 1));

                    } catch (IndexOutOfBoundsException e) {

                    }
                }

                try {
                    //checking the array elements are compatible with the datatype or not
                    if (s.contains(d.get(d.indexOf("=") - 1))) {
                        //count++;
                        //System.out.println(count);

                        if (s.contains(".")) {
                            //System.out.println("Array Store Exception occured in line "+lineNum1);
                            //System.out.println("Cannot pass a double value to integer");
                            errors++;
                            this.jTextArea2.append("* Array Store error occured in line  :" + lineNum1 + "\n");
                            this.jTextArea2.append(s + "\n");
                            //this.jTextArea2.append("Cannot pass a double value to integer \n");
                            this.jTextArea2.append("\n");
                            jTextArea3.append("* Try passing Integer value to the array in line number :" + lineNum1 + "\n");
                            jTextArea3.append("\n");
                        }

                        if (s.contains("\"")) {
                            //System.out.println("Array Store Exception occured in line "+lineNum1);
                            //System.out.println("Cannot pass a string value to integer");
                            errors++;
                            this.jTextArea2.append("* Array Store error occured in line  :" + lineNum1 + "\n");
                            this.jTextArea2.append(s + "\n");
                            //this.jTextArea2.append("Cannot pass a string value to integer \n");
                            this.jTextArea2.append("\n");
                            jTextArea3.append("* Try passing Integer value to the array in line number :" + lineNum1 + "\n");
                            jTextArea3.append("\n");
                        }
                    }
                } catch (ArrayIndexOutOfBoundsException e) {

                }

            }
        } catch (ConcurrentModificationException e) {

        }

    }

    /*
    * This method checks the array size is positive or a negative one.
     */
    public void negArrIndex() {
        List<String> result = new ArrayList<>();
        String[] words = null;
        int errorCount = 0;
        int lineNum = 0;
        int dcount = 0;
        int icount = 0;
        int strCount = 0;

        try {
            result = Files.readAllLines(Paths.get(selectedFilePath));

        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }

        for (java.util.Iterator<String> iterator = result.iterator(); iterator.hasNext();) {
            String v = iterator.next();
            if (v.trim().isEmpty() || v.trim().startsWith("/*") || v.trim().endsWith("*/") || v.trim().startsWith("//")
                    || v.trim().startsWith("*") || v.trim().startsWith("import") || v.trim().startsWith("#include") || v.trim().startsWith("using namespace")) {
                iterator.remove();
            }
        }

        for (String s : result) {
            lineNum++;
            words = s.split(" ");
            System.out.println(s);
            for (String word : words) {
                if (word.contains("[-")) {
                    errors++;
                    //System.out.println("Defined array size as a negative value in line "+lineNum);
                    //this.jTextArea2.append("Defined array size as a negative value in line :"+lineNum+"\n");
                    this.jTextArea2.append("* Defined array size as a negative value in line : " + lineNum + "\n");
                    this.jTextArea2.append(s);
                    this.jTextArea2.append("\n");
                    jTextArea3.append("* Try removing the negative index : " + lineNum + "\n");
                    jTextArea3.append("\n");
                }
            }
        }
    }

    /*
    * This method checks the order of occurences in the next, set and remove methods.
     */
    public void illState() {
        List<String> result = new ArrayList<>();
        String[] words = null;
        int errorCount = 0;
        int lineNum = 0;
        int cLine = 0;
        int c = 0;
        List<Integer> cArr = new ArrayList<>();

        try {
            result = Files.readAllLines(Paths.get(selectedFilePath));

        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }

        for (java.util.Iterator<String> iterator = result.iterator(); iterator.hasNext();) {
            String v = iterator.next();
            if (v.trim().isEmpty() || v.trim().startsWith("/*") || v.trim().endsWith("*/") || v.trim().startsWith("//")
                    || v.trim().startsWith("*") || v.trim().startsWith("import") || v.trim().startsWith("#include") || v.trim().startsWith("using namespace")) {
                iterator.remove();
            }
        }

        for (String s : result) {
            lineNum++;
            words = s.split(" ");
            System.out.println(s);
            for (String word : words) {

                //Checking for the order of occuring the methods. (When each method found, a value is assigned and stored in an array. That's how the method order is detected.)
                //Check for the next method.
                if (word.contains(".next()")) {
                    //Assign the value.
                    c += 2;

                    //Store it in the List.
                    cArr.add(c);
                    System.out.println(c);
                }

                if (word.contains(".remove()")) {
                    //Assign the value.
                    c -= 3;

                    //Store it in the List.
                    cArr.add(c);

                    //Line number is assigned to cLine variable.
                    cLine = lineNum;
                    System.out.println(c);
                    System.out.println(s);
                }

                if (word.contains(".set(")) {
                    //Assign the value.
                    c *= 4;

                    //Store it in the List.
                    cArr.add(c);
                    System.out.println(c);
                }

            }

        }
        try {
            //These are used to check the List value order. According to the values, the system will detect the method occurence orders.
            if (cArr.get(1) == -1 && cArr.get(0) == -3 || cArr.get(1) == -3) {
                System.out.println("Illegal State Error occured in line : " + cLine);
                errors++;
                this.jTextArea2.append("* Illegal State occured in line : " + cLine + "\n");
                //this.jTextArea2.append(s);
                this.jTextArea2.append("\n");
                jTextArea3.append("* Try removing the Iterator.method() in line :" + cLine + "\n");
                jTextArea3.append("\n");
            } else if (cArr.get(0) == 2 && cArr.get(1) == -1) {

            } else if (cArr.get(1) == -12 || cArr.get(1) == 2) {
                System.out.println("Illegal State Error occured in line : " + cLine);
                errors++;
                this.jTextArea2.append("* Illegal State occured in line : " + cLine + " \n");
                //this.jTextArea2.append(s);
                this.jTextArea2.append("\n");
                jTextArea3.append("* Try removing the Iterator.method() in line :" + cLine + "\n");
                jTextArea3.append("\n");
            }

            if (cArr.get(2) == -4 || cArr.get(2) == -1 || cArr.get(2) == -10) {
                System.out.println("Illegal State Error occured in line : " + cLine);
                errors++;
                this.jTextArea2.append("* Illegal State occured in line : " + cLine + "\n");
                //this.jTextArea2.append(s);
                this.jTextArea2.append("\n");
                jTextArea3.append("* Try removing the Iterator.method() in line :" + cLine + "\n");
                jTextArea3.append("\n");
            }
        } catch (IndexOutOfBoundsException e) {

        }
        if (c == 8) {
            //No problem
        }
    }
//    public void illState() {
//        List<String> result = new ArrayList<>();
//        String[] words = null;
//        int errorCount = 0;
//        int lineNum = 0;
//        int cLine = 0;
//        int c = 0;
//        List<Integer> cArr = new ArrayList<>();
//
//        try {
//            result = Files.readAllLines(Paths.get(selectedFilePath));
//
//        } catch (IOException e) {
//            // TODO Auto-generated catch block
//            e.printStackTrace();
//        }
//
//        for (java.util.Iterator<String> iterator = result.iterator(); iterator.hasNext();) {
//            String v = iterator.next();
//            if (v.trim().isEmpty() || v.trim().startsWith("/*") || v.trim().endsWith("*/") || v.trim().startsWith("//")
//                    || v.trim().startsWith("*") || v.trim().startsWith("import") || v.trim().startsWith("#include") || v.trim().startsWith("using namespace")) {
//                iterator.remove();
//            }
//        }
//
//        for (String s : result) {
//            lineNum++;
//            words = s.split(" ");
//            System.out.println(s);
//            for (String word : words) {
//
//                //assign the values according the occurences
//                if (word.contains(".next()")) {
//                    c += 2;
//                    cArr.add(c);
//                    System.out.println(c);
//                }
//
//                if (word.contains(".remove()")) {
//                    c -= 3;
//                    cArr.add(c);
//                    cLine = lineNum;
//                    System.out.println(c);
//                    System.out.println(s);
//                }
//
//                if (word.contains(".set(")) {
//                    c *= 4;
//                    cArr.add(c);
//                    System.out.println(c);
//                }
//
//            }
//
//        }
//        try {
//            //checking the array elements order
//            if (cArr.get(2) == -4 || cArr.get(2) == 5) {
//                //System.out.println("IllegalStateException occured in line : "+cLine);
//                errors++;
//                this.jTextArea2.append("Illegal State occured in line : " + cLine + " Iterator.remove(); \n");
//                //this.jTextArea2.append(s);
//                this.jTextArea2.append("\n");
//                jTextArea3.append("Try removing the remove() method in line :" + cLine + "\n");
//            }
//
//        } catch (IndexOutOfBoundsException e) {
//
//        }
//
//        if (c == 2) {
//            errors++;
//            this.jTextArea2.append("Illegal State occured in line : Iterator.set(); \n");
//            //this.jTextArea2.append(s);
//            this.jTextArea2.append("\n");
//            this.jTextArea3.append("Can't set an item before calling next() \n");
//            jTextArea3.append("Try removing the set() method \n");
//        }
//    }

    /*
    * This method checks if the start method called to the same thread many times. If so, the program will detect it as an error.
     */
    public void illThreadState() {
        List<String> result = new ArrayList<>();
        String[] words = null;
        int errorCount = 0;
        int lineNum = 0;
        int cLine = 0;
        int startCount = 0;
        List<String> starts = new ArrayList<>();
        List<Integer> line = new ArrayList<>();
        String[] array = new String[4];

        try {
            result = Files.readAllLines(Paths.get(selectedFilePath));

        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }

//		for(java.util.Iterator<String> iterator = result.iterator(); iterator.hasNext();) {
//			String v = iterator.next();
//			if(v.trim().isEmpty() || v.trim().startsWith("/*") || v.trim().endsWith("*/") || v.trim().startsWith("//") ||
//					v.trim().startsWith("*") || v.trim().startsWith("import")  || v.trim().startsWith("#include") || v.trim().startsWith("using namespace")) {
//				iterator.remove();
//			}
//		}
        try {
            for (String s : result) {
                lineNum++;
                words = s.split(" ");
                System.out.println(s);
                //check the start method
                if (s.contains(".start();")) {
                    startCount++;
                    //add the line to an array which occured the start() method
                    starts.add(s);

                    try {
                        //ckecking that element will occur multiple times
                        System.out.println(starts.get(0).length() == (starts.get(1).length()));
                        if (starts.get(0).length() == (starts.get(1).length()) == true) {
                            errors++;
                            int c = lineNum -= 4;
                            //System.out.println("Illegal Thread State Exception occured in line : "+lineNum);
                            this.jTextArea2.append("* Illegal Thread State occured in line : ");
                            this.jTextArea2.append(s);
                            this.jTextArea2.append("\n");
//                            this.jTextArea2.append("Cannot use the start() method twice for the same thread. \n");
//                            this.jTextArea2.append("\n");
                            jTextArea3.append("* Try removing the start() method in line : "+s+"\n");
                            jTextArea3.append("\n");
                        } else if (starts.get(0).length() == (starts.get(1).length()) == false && starts.get(0).length() == (starts.get(2).length()) == true || starts.get(0).length() == (starts.get(3).length()) == true || starts.get(1).length() == (starts.get(2).length()) == true) {
                            //int c = lineNum-=4;
                            //System.out.println("Illegal Thread State Exception occured in line : "+lineNum);
                            errors++;
                            this.jTextArea2.append("* Illegal Thread State occured in line : ");
                            this.jTextArea2.append(s);
                            this.jTextArea2.append("\n");
//                            this.jTextArea2.append("Cannot use the start() method twice for the same thread. \n");
//                            this.jTextArea2.append("\n");
                            jTextArea3.append("* Try removing the start() method in line : "+s+"\n");
                            jTextArea3.append("\n");
                        }

                    } catch (IndexOutOfBoundsException e) {

                    }

                }

                if (s.contains(".sleep();")) {
                    startCount++;

                    starts.add(s);
                    //System.out.println(s.compareTo(anotherString));
                    try {
                        //System.out.println(starts);
                        System.out.println(starts.get(0).length() == (starts.get(1).length()));

                        if (starts.get(0).length() == (starts.get(1).length()) == true) {
                            errors++;
                            System.out.println("Illegal thread state error occured in line : ");

                            jTextArea2.append("* Illegal thread state error error occured in line ");
                            this.jTextArea2.append(s);
                            this.jTextArea2.append("\n");
                            jTextArea3.append("* Try removing the sleep() method in line : "+s+"\n");
                            jTextArea3.append("\n");
                        } else if (starts.get(0).length() == (starts.get(1).length()) == false && starts.get(0).length() == (starts.get(2).length()) == true || starts.get(0).length() == (starts.get(3).length()) == true || starts.get(1).length() == (starts.get(2).length()) == true) {
                            errors++;
                            System.out.println("Illegal Thread State error occured in line : " + lineNum);
                            jTextArea2.append("* Illegal thread state error error occured in line ");
                            this.jTextArea2.append(s);
                            this.jTextArea2.append("\n");
                            jTextArea3.append("* Try removing the start() method in line : "+s+"\n");
                            jTextArea3.append("\n");
                        }

                    } catch (IndexOutOfBoundsException e) {

                    }

                }

                if (s.contains(".wait()")) {
                    startCount++;

                    starts.add(s);
                    //System.out.println(s.compareTo(anotherString));
                    try {
                        System.out.println(starts);
                        System.out.println(starts.get(0).length());
                        System.out.println(starts.get(1).length());
                        System.out.println(starts.get(0).length() == (starts.get(1).length()));

                        if (starts.get(0).length() == (starts.get(1).length()) == true) {
                            System.out.println("Illegal Monitor State Error occured in line : " + lineNum);
                            errors++;
                            jTextArea2.append("* Illegal monitor state error occured in line ");
                            this.jTextArea2.append(s);
                            this.jTextArea2.append("\n");
                            jTextArea3.append("* Try removing the wait() method in line : "+s+"\n");
                            jTextArea3.append("\n");
                        } else if (starts.get(0).length() == (starts.get(1).length()) == false && starts.get(0).length() == (starts.get(2).length()) == true || starts.get(0).length() == (starts.get(3).length()) == true || starts.get(1).length() == (starts.get(2).length()) == true) {
                            System.out.println("Illegal Monitor State Error occured in line : " + lineNum);
                            errors++;
                            jTextArea2.append("* Illegal monitor state error occured in line ");
                            this.jTextArea2.append(s);
                            this.jTextArea2.append("\n");
                            jTextArea3.append("* Try removing the wait() method in line : "+s+"\n");
                            jTextArea3.append("\n");
                        }

                    } catch (IndexOutOfBoundsException e) {

                    }

                }

                if (s.contains(".run();")) {
                    startCount++;

                    starts.add(s);
                    //System.out.println(s.compareTo(anotherString));
                    try {
                        //System.out.println(starts);
                        System.out.println(starts.get(0).length() == (starts.get(1).length()));

                        if (starts.get(0).length() == (starts.get(1).length()) == true) {
                            System.out.println("Illegal Thread Run Method Error occured in line : " + lineNum);
                            errors++;
                            jTextArea2.append("* Illegal thread run method error occured in line ");
                            this.jTextArea2.append(s);
                            this.jTextArea2.append("\n");
                            jTextArea3.append("* Try removing the run() method in line : "+s+"\n");
                            jTextArea3.append("\n");
                        } else if (starts.get(0).length() == (starts.get(1).length()) == false && starts.get(0).length() == (starts.get(2).length()) == true || starts.get(0).length() == (starts.get(3).length()) == true || starts.get(1).length() == (starts.get(2).length()) == true) {
                            System.out.println("Illegal Thread Run Method Error occured in line : " + lineNum);
                            errors++;
                            jTextArea2.append("* Illegal thread run method error occured in line ");
                            this.jTextArea2.append(s);
                            this.jTextArea2.append("\n");
                            jTextArea3.append("* Try removing the run() method in line : "+s+"\n");
                            jTextArea3.append("\n");
                        }

                    } catch (IndexOutOfBoundsException e) {

                    }

                }

            }
        } catch (ConcurrentModificationException e) {

        }
    }

    /*
    * This method checks if any divisioin by zero occured in the selected code. If so, the program will identify it as an error.
     */
    public void divisionByZero() throws ArrayIndexOutOfBoundsException {
        List<String> result = new ArrayList<>();
        String[] words = null;
        int errorCount = 0;
        int lineNum = 0;
        int cLine = 0;
        int c = 0;
        String[] arr = new String[50];
        List<String> str = new ArrayList<>();
        List<String> str2 = new ArrayList<>();
        int count = 0;

        try {
            result = Files.readAllLines(Paths.get(selectedFilePath));

        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }

        for (java.util.Iterator<String> iterator = result.iterator(); iterator.hasNext();) {
            String v = iterator.next();
            if (v.trim().isEmpty() || v.trim().startsWith("/*") || v.trim().endsWith("*/") || v.trim().startsWith("//")
                    || v.trim().startsWith("*") || v.trim().startsWith("import") || v.trim().startsWith("#include") || v.trim().startsWith("using namespace")) {
                iterator.remove();
            }
        }

        List<String> d = new ArrayList<>();
        String[] l = null;
        //int count = 0;
        //jTextArea1.append("----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------"+"\n");
        //jTextArea1.append("----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------"+"\n");

        try {
            for (String s : result) {
                lineNum++;
                words = s.split(" ");
                System.out.println(lineNum + " " + s);
                //this.jTextArea1.setRows(lineNum);
                String xyz = Integer.toString(lineNum);
                jTextArea1.append(xyz + "         |" + s + "\n");

//                        if(s.contains("/0") || s.contains(" / 0") || s.contains("/ 0")) {
//				//System.out.println("Division by zero occured in line : "+lineNum);
//                                this.jTextArea2.append("Division by zero occured in line : "+lineNum+"\n");
//                                this.jTextArea2.append(s);
//                                this.jTextArea2.append("\n");
//			}
                //checking for the variables assined to 0
                if (s.contains("=0") || s.contains(" = 0") || s.contains("= 0")) {
                    l = s.split(" ");
                    for (int x = 0; x < l.length; x++) {
                        //add those to an array
                        d.add(l[x]);
                    }
                    try {
                        //taking the variable name assigned to 0
                        int ind = d.indexOf("=") - 1;
                        System.out.println(ind);
                        System.out.println(d.get(d.indexOf("=") - 1));

                    } catch (IndexOutOfBoundsException e) {

                    }
                }

                List<String> d2 = new ArrayList<>();
                String[] l2 = null;

                //checking for the divisions
                if (s.contains("/")) {
                    l2 = s.split(" ");
                    for (int x = 0; x < l2.length; x++) {
                        d2.add(l2[x]);
                    }
                    try {
                        //track the variable name which make division
                        int ind = d2.indexOf("/");
                        System.out.println(ind);
                        System.out.println(d2.get(d2.indexOf("/") + 1));

                        //checking the variable name tracked before is the same which makes the division
                        if ((d.get(d.indexOf("=") - 1).length() == (d2.get(d2.indexOf("/") + 1).length()))) {
                            //System.out.println("Division by zero occured in line "+lineNum);
                            errors++;
                            this.jTextArea2.append("* Division by zero occured in line : " + lineNum + "\n");
                            this.jTextArea2.append(s);
                            this.jTextArea2.append("\n");

                            this.jTextArea3.append("* Try replacing the " + "\n");
                            this.jTextArea3.append(s + "\n");
                            this.jTextArea3.append("line with a non-zero value" + "\n");
                            this.jTextArea3.append("\n");

                        } else {
                            //System.out.println("Division by zero occured in line "+lineNum);
                        }

                    } catch (IndexOutOfBoundsException e) {

                    }
                }
                try {

                } catch (IndexOutOfBoundsException ep) {

                }
            }
        } catch (ConcurrentModificationException e) {

        }
    }

    /*
    * This method checks if any divisioin by zero occured in the selected code. If so, the program will identify it as an error.
     */
    public void divisionByZero2() throws ArrayIndexOutOfBoundsException {
        List<String> result = new ArrayList<>();
        String[] words = null;
        int errorCount = 0;
        int lineNum = 0;
        int cLine = 0;
        int c = 0;
        String[] arr = new String[50];
        List<String> str = new ArrayList<>();
        List<String> str2 = new ArrayList<>();
        int count = 0;

        try {
            result = Files.readAllLines(Paths.get(selectedFilePath));

        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }

        for (java.util.Iterator<String> iterator = result.iterator(); iterator.hasNext();) {
            String v = iterator.next();
            if (v.trim().isEmpty() || v.trim().startsWith("/*") || v.trim().endsWith("*/") || v.trim().startsWith("//")
                    || v.trim().startsWith("*") || v.trim().startsWith("import") || v.trim().startsWith("#include") || v.trim().startsWith("using namespace")) {
                iterator.remove();
            }
        }

        List<String> d = new ArrayList<>();
        String[] l = null;
        //int count = 0;
        //jTextArea1.append("----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------"+"\n");
        //jTextArea1.append("----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------"+"\n");

        try {
            for (String s : result) {
                lineNum++;
                words = s.split(" ");
                System.out.println(lineNum + " " + s);
                //this.jTextArea1.setRows(lineNum);
                String xyz = Integer.toString(lineNum);
                //jTextArea1.append(xyz+"         |"+s+"\n");

                if (s.contains("/0") || s.contains(" / 0") || s.contains("/ 0")) {
                    //System.out.println("Division by zero occured in line : "+lineNum);
                    errors++;
                    this.jTextArea2.append("* Division by zero occured in line : " + lineNum + "\n");
                    this.jTextArea2.append(s);
                    this.jTextArea2.append("\n");

                    this.jTextArea3.append("* Try replacing the " + "\n");
                    this.jTextArea3.append(s + "\n");
                    this.jTextArea3.append("line with a non zero-value" + "\n");
                    this.jTextArea3.append("\n");
                }

            }
        } catch (ConcurrentModificationException e) {

        }
    }

    /*
    * This method checks that a null value is passed as the function parameters.
     */
    public void illArgument() {
        List<String> result = new ArrayList<>();
        String[] words = null;
        int errorCount = 0;
        int lineNum = 0;
        int cLine = 0;
        int c = 0;
        String[] arr = new String[50];

        try {
            result = Files.readAllLines(Paths.get(selectedFilePath));

        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }

        for (java.util.Iterator<String> iterator = result.iterator(); iterator.hasNext();) {
            String v = iterator.next();
            if (v.trim().isEmpty() || v.trim().startsWith("/*") || v.trim().endsWith("*/") || v.trim().startsWith("//")
                    || v.trim().startsWith("*") || v.trim().startsWith("import") || v.trim().startsWith("#include") || v.trim().startsWith("using namespace")) {
                iterator.remove();
            }
        }

        for (String s : result) {
            lineNum++;
            words = s.split(" ");
            System.out.println(lineNum + "  " + s);

            if (s.contains("System.out.println(null)")) {
                //ignore
            } else if (s.contains("(") && s.contains("null") && s.contains(";")) {
                System.out.println("Illegal argument error occured");
                errors++;
                jTextArea2.append("* Illegal argument error occured in line : " + lineNum + "\n");
                jTextArea2.append(s);
                jTextArea2.append("\n");
                this.jTextArea3.append("* Try removing null in the parameters in line : "+ s+ "\n");
                jTextArea3.append("\n");
            }

        }

    }

    /*
    * This method checks if the user have passed values to an array after converting it to a List using the asList method.
    * If the program detects that the user have passed values, the progra will detect it as an error.
     */
    public void unsupportedOperation() {
        List<String> result = new ArrayList<>();
        String[] words = null;
        int errorCount = 0;
        int lineNum = 0;
        int cLine = 0;
        int c = 0;
        String[] arr = new String[50];

        try {
            result = Files.readAllLines(Paths.get(selectedFilePath));

        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }

        for (java.util.Iterator<String> iterator = result.iterator(); iterator.hasNext();) {
            String v = iterator.next();
            if (v.trim().isEmpty() || v.trim().startsWith("/*") || v.trim().endsWith("*/") || v.trim().startsWith("//")
                    || v.trim().startsWith("*") || v.trim().startsWith("import") || v.trim().startsWith("#include") || v.trim().startsWith("using namespace")) {
                iterator.remove();
            }
        }

        String[] s1 = null;
        String[] s2 = null;
        int cnt = 0;

        for (String s : result) {
            lineNum++;
            words = s.split(" ");
            System.out.println(s);

            if (s.startsWith("String[]")) {
                s1 = s.split(" ");
                System.out.println(s1[1]);
            }

            if (s.contains("Arrays.asList(")) {
                s2 = s.split(" ");
                System.out.println(s2[1]);

                if (s.contains(s2[1]) && s.contains(s1[1])) {
                    cnt++;
                }
            }

            try {
                if (s.startsWith(s2[1]) && s.contains(".add") && cnt == 1) {
                    //System.out.println(cnt);
                    System.out.println("Unsupported operation occured in line" + lineNum);
                    System.out.println("Can't add new elements in an array after converting it into a List");
                    errors++;
                    jTextArea2.append("* Unsupported operation occured in line " + lineNum + "\n");
                    //jTextArea3.append("Can't add new elements in an array after converting it into a List" + "\n");
                    jTextArea3.append("* Try removing the .add() method in the List of line " + lineNum + "\n");

                }
            } catch (NullPointerException te) {

            }
        }
    }

    /*
    * This method will check that the inheritance of the classes are done properly.
     */
    public void classCasting() {
        List<String> result = new ArrayList<>();
        String[] words = null;
        int errorCount = 0;
        int lineNum = 0;
        int cLine = 0;
        int startCount = 0;
        List<String> starts = new ArrayList<>();
        List<Integer> line = new ArrayList<>();
        String[] array = new String[4];

        try {
            result = Files.readAllLines(Paths.get(selectedFilePath));

        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }

        String[] s1 = null;
        String[] s2 = null;
        int cnt = 0;

        for (String s : result) {
            lineNum++;
            words = s.split(" ");
            System.out.println(s);

            if (s.contains("extends")) {
                s1 = s.split(" ");
                //System.out.println(s1[3]);
            }

            if (s.contains("new")) {
                try {
                    s2 = s.split(" ");
                    System.out.println(s2[4]);

                    if (s2[0].equals(s1[3]) && s2[4].equals(s1[3])) {
                        errors++;
                        System.out.println("Class casting error occured.......");
                        jTextArea2.append("* Class casting error occured in line " + lineNum + "\n");
                        jTextArea3.append("* Try removing the parent class name (" + s2[4] + ") in line " + lineNum + "\n");
                        jTextArea3.append("\n");
                    }
                } catch (NullPointerException | ArrayIndexOutOfBoundsException ds) {
                }

            }

        }

    }

    public void illMonitorState() {
        List<String> result = new ArrayList<>();
        String[] words = null;
        int errorCount = 0;
        int lineNum = 0;
        int cLine = 0;
        int startCount = 0;
        List<String> starts = new ArrayList<>();
        List<Integer> line = new ArrayList<>();
        String[] array = new String[4];

        try {
            result = Files.readAllLines(Paths.get(selectedFilePath));

        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }

        try {
            for (String s : result) {
                lineNum++;
                words = s.split(" ");
                System.out.println(s);
                if (s.contains(".wait()")) {
                    startCount++;

                    starts.add(s);
                    //System.out.println(s.compareTo(anotherString));
                    try {
                        System.out.println(starts);
                        System.out.println(starts.get(0).length());
                        System.out.println(starts.get(1).length());
                        System.out.println(starts.get(0).length() == (starts.get(1).length()));

                        if (starts.get(0).length() == (starts.get(1).length()) == true) {
                            System.out.println("Illegal Monitor State Error occured in line : " + lineNum);
                            errors++;
                            jTextArea2.append("* Illegal monitor state error occured in line " + lineNum + "\n");
                            jTextArea3.append("* Try removing the wait() method in line " + lineNum + "\n");
                            jTextArea3.append("\n");
                        } else if (starts.get(0).length() == (starts.get(1).length()) == false && starts.get(0).length() == (starts.get(2).length()) == true || starts.get(0).length() == (starts.get(3).length()) == true || starts.get(1).length() == (starts.get(2).length()) == true) {
                            System.out.println("Illegal Monitor State Error occured in line : " + lineNum);
                            errors++;
                            jTextArea2.append("* Illegal monitor state error occured in line " + lineNum + "\n");
                            jTextArea3.append("* Try removing the wait() method in line " + lineNum + "\n");
                            jTextArea3.append("\n");
                        }

                    } catch (IndexOutOfBoundsException e) {

                    }

                }
            }
        } catch (ConcurrentModificationException e) {

        }
    }

    public void illThreadRunMethod() {
        List<String> result = new ArrayList<>();
        String[] words = null;
        int errorCount = 0;
        int lineNum = 0;
        int cLine = 0;
        int startCount = 0;
        List<String> starts = new ArrayList<>();
        List<Integer> line = new ArrayList<>();
        String[] array = new String[4];

        try {
            result = Files.readAllLines(Paths.get(selectedFilePath));

        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }

        try {
            for (String s : result) {
                lineNum++;
                words = s.split(" ");
                System.out.println(s);
                if (s.contains(".run();")) {
                    startCount++;

                    starts.add(s);
                    //System.out.println(s.compareTo(anotherString));
                    try {
                        //System.out.println(starts);
                        System.out.println(starts.get(0).length() == (starts.get(1).length()));

                        if (starts.get(0).length() == (starts.get(1).length()) == true) {
                            System.out.println("Illegal Thread Run Method Error occured in line : " + lineNum);
                            errors++;
                            jTextArea2.append("* Illegal thread run method error occured in line " + s + "\n");
                            jTextArea3.append("* Try removing the run() method in line " + s + "\n");
                            jTextArea3.append("\n");
                        } else if (starts.get(0).length() == (starts.get(1).length()) == false && starts.get(0).length() == (starts.get(2).length()) == true || starts.get(0).length() == (starts.get(3).length()) == true || starts.get(1).length() == (starts.get(2).length()) == true) {
                            System.out.println("Illegal Thread Run Method Error occured in line : " + lineNum);
                            errors++;
                            jTextArea2.append("* Illegal thread run method error occured in line " + s + "\n");
                            jTextArea3.append("* Try removing the run() method in line " + s + "\n");
                            jTextArea3.append("\n");
                        }

                    } catch (IndexOutOfBoundsException e) {

                    }

                }
            }
        } catch (ConcurrentModificationException e) {

        }
    }

    public void illThreadState2() {
        List<String> result = new ArrayList<>();
        String[] words = null;
        int errorCount = 0;
        int lineNum = 0;
        int cLine = 0;
        int startCount = 0;
        List<String> starts = new ArrayList<>();
        List<Integer> line = new ArrayList<>();
        String[] array = new String[4];

        try {
            result = Files.readAllLines(Paths.get(selectedFilePath));

        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }

        try {
            for (String s : result) {
                lineNum++;
                words = s.split(" ");
                System.out.println(s);
                if (s.contains(".sleep();")) {
                    startCount++;

                    starts.add(s);
                    //System.out.println(s.compareTo(anotherString));
                    try {
                        //System.out.println(starts);
                        System.out.println(starts.get(0).length() == (starts.get(1).length()));

                        if (starts.get(0).length() == (starts.get(1).length()) == true) {
                            errors++;
                            System.out.println("Illegal thread state error occured in line : " + lineNum);
                            jTextArea2.append("* Illegal thread state error error occured in line " + lineNum + "\n");
                            jTextArea3.append("* Try removing sleep() method in line " + lineNum + "\n");
                            jTextArea3.append("\n");
                        } else if (starts.get(0).length() == (starts.get(1).length()) == false && starts.get(0).length() == (starts.get(2).length()) == true || starts.get(0).length() == (starts.get(3).length()) == true || starts.get(1).length() == (starts.get(2).length()) == true) {
                            errors++;
                            System.out.println("Illegal Thread State Exception occured in line : " + lineNum);
                            jTextArea2.append("* Illegal thread state error error occured in line " + lineNum + "\n");
                            jTextArea3.append("* Try removing sleep() method in line " + lineNum + "\n");
                            jTextArea3.append("\n");
                        }

                    } catch (IndexOutOfBoundsException e) {

                    }

                }
            }
        } catch (ConcurrentModificationException e) {

        }
    }

    /*
    * This method detects if the clone method is used in the code without implementing the Cloneable interface.
     */
    public void cloneError() {
        List<String> result = new ArrayList<>();
        String[] words = null;
        int errorCount = 0;
        int lineNum = 0;
        int cLine = 0;
        int c = 0;
        List<Integer> cArr = new ArrayList<>();

        try {
            result = Files.readAllLines(Paths.get(selectedFilePath));

        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }

        for (java.util.Iterator<String> iterator = result.iterator(); iterator.hasNext();) {
            String v = iterator.next();
            if (v.trim().isEmpty() || v.trim().startsWith("/*") || v.trim().endsWith("*/") || v.trim().startsWith("//")
                    || v.trim().startsWith("*") || v.trim().startsWith("import") || v.trim().startsWith("#include") || v.trim().startsWith("using namespace")) {
                iterator.remove();
            }
        }

        for (String s : result) {
            lineNum++;
            words = s.split(" ");
            System.out.println(s);

            for (String word : words) {

                if (word.endsWith("Cloneable{")) {
                    c += 2;
                    cArr.add(c);
                    System.out.println(c);
                }

                if (word.contains(".clone();")) {
                    c -= 3;
                    cArr.add(c);
                    cLine = lineNum;
                    System.out.println(c);
                    System.out.println(s);
                }

            }

        }
        try {
            if (cArr.get(0) == -3) {
                errors++;
                System.out.println("Clone error occured in line : " + cLine);
                jTextArea2.append("* Clone error occured in line " + cLine + "\n");
                jTextArea3.append("* Try implementing Cloneable interface in line :"+cLine+"\n");
                jTextArea3.append("\n");
            }
        } catch (IndexOutOfBoundsException as) {
        }
    }

    public void pathNotFound() {
        List<String> result = new ArrayList<>();
        String[] words = null;
        int errorCount = 0;
        int lineNum = 0;
        int cLine = 0;
        int startCount = 0;
        //ListString starts = new ArrayList();
        //ListInteger line = new ArrayList();
        String[] array = new String[4];

        try {
            result = Files.readAllLines(Paths.get(selectedFilePath));

        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }

        int cnt = 0;

        for (String s : result) {
            lineNum++;
            words = s.split(" ");
            System.out.println(s);
            String name = null;
            if (s.contains("File(")) {
                Pattern p = Pattern.compile("\"([^\"]*)\"");
                Matcher m = p.matcher(s);
                while (m.find()) {
                    System.out.println(m.group(1));
                    name = m.group(1);
                }
            }
            File tempFile = new File(name);
            boolean exists = tempFile.exists();
            System.out.println(exists);

            if (exists) {
            } else {
                jTextArea2.append("* File not found in line " + lineNum + "\n");
                jTextArea2.append("\n");
                jTextArea3.append("* Try a valid path in line " + lineNum + "\n");
                jTextArea3.append("\n");
            }
        }

    }

    public void classNotFound() {
        List<String> result = new ArrayList<>();
        String[] words = null;
        int errorCount = 0;
        int lineNum = 0;
        int cLine = 0;
        int startCount = 0;
//		ListString starts = new ArrayList();
//		ListInteger line = new ArrayList();
        String[] array = new String[4];

        try {
            result = Files.readAllLines(Paths.get(selectedFilePath));

        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }

        String[] s1 = null;

        for (String s : result) {
            lineNum++;
            words = s.split(" ");
            System.out.println(s);
            String name = null;
            if (s.contains(File())) {
                Pattern p = Pattern.compile("([ ^])");
                Matcher m = p.matcher(s);
                while (m.find()) {
                    System.out.println(m.group(1));
                    name = m.group(1);
                }
            }
            File tempFile = new File(name);
            boolean exists = tempFile.exists();
            System.out.println(exists);
//                for (String s : result) {
//                    lineNum++;
//                    words = s.split();
//                    System.out.println(s);
//                    String name = null;
//                    if (s.contains(class)) {
//				s1 = s.split();
//                        System.out.println(s1[1]);
//                    }
//
//                }
        }
    }


    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        int line = 0;
        this.jFileChooser1.setCurrentDirectory(new java.io.File(".\\src\\main\\java\\com\\myprojcet\\sdaproject\\Component3\\ProjectTexts"));
        this.jFileChooser1.setDialogTitle("Select file");
        this.jFileChooser1.setFileSelectionMode(JFileChooser.FILES_ONLY);

        if (this.jFileChooser1.showOpenDialog(this.jButton1) == JFileChooser.APPROVE_OPTION) {
            this.selectedFilePath = this.jFileChooser1.getSelectedFile().getAbsolutePath();
            this.filePath.setText(this.selectedFilePath);
        }

//                JFileChooser chooser= new JFileChooser();
//                chooser.setCurrentDirectory(new File("."));
//                //chooser.setFileFilter(new FileNameExtensionFilter("map","MAP"));
//                int value = chooser.showOpenDialog(null);
//                File f= chooser.getSelectedFile();
//                String filename= f.getAbsolutePath();
//                
//                this.jFileChooser1.setDialogTitle("Choose File");
//                this.jFileChooser1.setFileSelectionMode(JFileChooser.FILES_ONLY);
//                if(this.jFileChooser1.showOpenDialog(this.jButton1) == JFileChooser.APPROVE_OPTION){
//                    this.selectedFilePath = this.jFileChooser1.getSelectedFile().getAbsolutePath();
//                    this.filePath.setText(this.selectedFilePath);
//                }
        try {
            FileReader reader = new FileReader(selectedFilePath);
            BufferedReader br = new BufferedReader(reader);
            //jTextArea1.read(br,null);
            br.close();
            jTextArea1.requestFocus();

//                    List<String> result = new ArrayList<>();
//                    result = (List<String>) reader;
//                    for(String s : result){
//                        line++;
//                        
//                        List<String> order = new ArrayList<>();
//                        order.add(s+line);
//                        jTextArea1.add(this.jTextArea1, line);
//                        
//                    }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }


    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        //findReturnStatements();
        numberFormat();
        arrStore3();
        arrStore2();
        arrStore();
        arrStore4();
        arrStore5();
        negArrIndex();
        illState();
        illThreadState();
        divisionByZero();
        divisionByZero2();
        illArgument();
        unsupportedOperation();
        classCasting();
        //illMonitorState();
        illThreadRunMethod();
        //illThreadState2();
        cloneError();
        pathNotFound();
        classNotFound();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void filePathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filePathActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_filePathActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        jTextArea1.selectAll();
        jTextArea1.replaceSelection("");

        jTextArea2.selectAll();
        jTextArea2.replaceSelection("");

        filePath.selectAll();
        filePath.replaceSelection("");

        jTextArea3.selectAll();
        jTextArea3.replaceSelection("");
    }//GEN-LAST:event_jButton3ActionPerformed

    private int ctLine() {
        List<String> result = new ArrayList<>();

        try {
            result = Files.readAllLines(Paths.get(selectedFilePath));

        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }

        for (java.util.Iterator<String> iterator = result.iterator(); iterator.hasNext();) {
            String v = iterator.next();
            if (v.trim().isEmpty() || v.trim().startsWith("/*") || v.trim().endsWith("*/") || v.trim().startsWith("//")
                    || v.trim().startsWith("*") || v.trim().startsWith("import") || v.trim().startsWith("#include") || v.trim().startsWith("using namespace")) {
                iterator.remove();
            }
        }

        for (String s : result) {
            loc++;
        }
        return loc;
    }

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed

        ctLine();
        String msg = jTextArea2.getText();
        new Corrections(msg, errors, loc).setVisible(true);


    }//GEN-LAST:event_jButton4ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BugTrackerMainPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BugTrackerMainPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BugTrackerMainPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BugTrackerMainPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //new BugTrackerMainPage().LineNumberTextAreaTest();
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BugTrackerMainPage().setVisible(true);
                //new LineNumberTextAreaTest().setVisible(true);

            }
        });

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField filePath;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextArea jTextArea3;
    // End of variables declaration//GEN-END:variables

    private CharSequence File() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

}
