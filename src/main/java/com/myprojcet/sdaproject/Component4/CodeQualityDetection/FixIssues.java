/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package com.myprojcet.sdaproject.Component4.CodeQualityDetection;

import java.io.File;
import java.io.FileWriter;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import javax.swing.JOptionPane;

/**
 *
 * @author Prabuddha Abisheka
 */
public class FixIssues extends javax.swing.JFrame {

     ElementIdentifier eI;
    
    /** Creates new form FixIssues */
    public FixIssues() {
        initComponents();
    }

    public FixIssues(ElementIdentifier eI){
        initComponents();
        this.eI = eI;
	detecteIssues();
    }
    
    public void detecteIssues(){
        
        List<String> unusedImports = eI.unusedImportDetection();
        HashMap<Integer, String> redundantModifiers = eI.redundantInterfaceModifiers();
        List<String> invalidGenerics = eI.invalidGenericUsage();
        HashMap<String, List<String>> fixedTernary = eI.convertTernaryOperator();
        
        if(unusedImports.isEmpty()){
            this.jCheckBox1.setEnabled(false);
        }
        
        if(redundantModifiers.isEmpty()){
            this.jCheckBox2.setEnabled(false);
        }
        
        if(invalidGenerics.isEmpty()){
            this.jCheckBox3.setEnabled(false);
        }
        
        if(fixedTernary.isEmpty()){
            this.jCheckBox4.setEnabled(false);
        }
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel2 = new javax.swing.JLabel();
        jCheckBox1 = new javax.swing.JCheckBox();
        jCheckBox2 = new javax.swing.JCheckBox();
        jCheckBox3 = new javax.swing.JCheckBox();
        jCheckBox4 = new javax.swing.JCheckBox();
        jButton1 = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setText("Fix Detected Code Issues");

        jLabel2.setText("Please tick and select the issues you need to fix througth the application.");

        jCheckBox1.setText("Remove unused imports");
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });

        jCheckBox2.setText("Remove redundant modifiers in interfaces");

        jCheckBox3.setText("Remove invalid generic usage");

        jCheckBox4.setText("Convert ternary operators");

        jButton1.setText("Apply Fixes");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTextArea1.setEditable(false);
        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jTextArea1.setText("Detected issues can be automatically fixed here.\nCheckboxes related to the issues will be enabled upon detection\nThe fixed file will be stored in the \napplication directory and the applied changes\nare logged in the log.txt file.");
        jScrollPane1.setViewportView(jTextArea1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator2, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jButton1))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jCheckBox1)
                                            .addComponent(jCheckBox3))
                                        .addGap(50, 50, 50)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jCheckBox4)
                                            .addComponent(jCheckBox2))))
                                .addGap(0, 85, Short.MAX_VALUE)))
                        .addContainerGap())))
            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 11, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jCheckBox1)
                    .addComponent(jCheckBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBox3)
                    .addComponent(jCheckBox4))
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBox1ActionPerformed

    //This method is used to fixes the issues that user have selected to fix and create the fixed file.
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
       
        try {
    
            List<String> unusedImports = eI.unusedImportDetection();
            HashMap<Integer, String> redundantModifiers = eI.redundantInterfaceModifiers();
            List<String> invalidGenerics = eI.invalidGenericUsage();
            HashMap<String, List<String>> fixedTernary = eI.convertTernaryOperator();
            String fileName = eI.getFileName();
            
            List<String> logFileList = new ArrayList<>();
            List<String> file = eI.getOriginalFile();
	    
	    if(!this.jCheckBox1.isEnabled() && !this.jCheckBox2.isEnabled() && !this.jCheckBox3.isEnabled() && !this.jCheckBox4.isEnabled()) {
                JOptionPane.showMessageDialog(rootPane, "There are no fixable issues detected in the selected file.");
                return; 
            }
            
            if(!this.jCheckBox1.isSelected() && !this.jCheckBox2.isSelected() && !this.jCheckBox3.isSelected() && !this.jCheckBox4.isSelected()) {
                JOptionPane.showMessageDialog(rootPane, "Please select one or more fixe options to apply fixes.");
                return; 
            }
            
            logFileList.add("-----------------------------------------------------------------------------------------------");
            logFileList.add("\n-----------------------------Code Issues Fixed------------------------------------");
            logFileList.add("\n-----------------------------------------------------------------------------------------------\n");
            logFileList.add("\nFile Name: " + fileName + "\n");
            
            if(this.jCheckBox1.isSelected()){
                
                if(!unusedImports.isEmpty()){
                    
                    if(!file.isEmpty()){
                        for(String unused : unusedImports){
                            file.remove(unused);
                        }
                    }
                                        
                    logFileList.add("\nUnused imports fixed!\n");
                    for(String unused : unusedImports){
                        logFileList.add("\n"+unused);
                    }
                    logFileList.add("\n-----------------------------------------------------------------------------------------------\n");
                }
            }
            
            if(this.jCheckBox2.isSelected()){
                if(!redundantModifiers.isEmpty()){
                    
                    if(!file.isEmpty()){
                        for(Integer key : redundantModifiers.keySet()){
                            String interfaceName = redundantModifiers.get(key);
                            
                            int indexOfInterface = this.getIndexOf(file, interfaceName);
                            String interfaceLine = file.get(indexOfInterface);
                            String wByW[] = interfaceLine.split(" ");
                            String modifier = wByW[0];
                            
                            System.out.println(wByW);
                            
                            String line = file.get(key + indexOfInterface);
                            
                            System.out.println(line);
                            
                            String fixedLine = line.replaceAll(modifier + " ", "");
                            
                            System.out.println(fixedLine);
                            
                            file.set(key + indexOfInterface, fixedLine);
                        }
                    }
                    
                    logFileList.add("\nRedundant access modifiers usage in interfaces fixed\n");
                    for(Integer key : redundantModifiers.keySet()){
                        String interfaceName = redundantModifiers.get(key);

                        int indexOfInterface = eI.getIndexOf(interfaceName);
                        String interfaceLine = eI.getLineOfCode(indexOfInterface);

                        logFileList.add("\n" + interfaceLine + " : Line " + (indexOfInterface + 1));
                        logFileList.add("\n" + eI.getLineOfCode(key + indexOfInterface) + " : Line " + (key + indexOfInterface + 1) + "\n");
                    }
                    logFileList.add("\n-----------------------------------------------------------------------------------------------\n");
                }
            }

            if(this.jCheckBox3.isSelected()){
                
                if(!invalidGenerics.isEmpty()){
                    
                    if(!file.isEmpty()) {
                        for(String line : invalidGenerics){

                            int indexOfLine = file.indexOf(line);              

                            String firstGeneric = line.substring(line.indexOf('<') + 1, line.indexOf('>'));
                            String lastGeneric = line.substring(line.lastIndexOf('<') + 1, line.lastIndexOf('>'));
                            
                            line = line.replaceFirst(firstGeneric, "1");
                            line = line.replaceAll(lastGeneric, "");
                            line = line.replaceFirst("<1>", "<" + firstGeneric + ">");
                            
                            file.set(indexOfLine, line);
                        }
                    }
                    
                    logFileList.add("\nInvalid Generics Usage In Constructors fixed\n");
                    for(String line : invalidGenerics){

                        List<String> originalFile = eI.getOriginalFile();

                        int indexOfLine = originalFile.indexOf(line);              

                        logFileList.add("\n" + line.trim() + " : Line " + (indexOfLine + 1));
                    }
                    logFileList.add("\n\n-----------------------------------------------------------------------------------------------");

                }
            }
            
            
            if(this.jCheckBox4.isSelected()){
                if(!fixedTernary.isEmpty()){
                    
                    if(!file.isEmpty()) {
                        for(String key : fixedTernary.keySet()){
                            
                            //String line = key.substring(0, key.length()-1);
                            int currentIndex = file.indexOf(key);
                            List<String> converted = fixedTernary.get(key);
                            
//                            System.out.println(converted + " here1");
//                            System.out.println(currentIndex + " here2");
//                            System.out.println(key + " here3");
                            
                            char[] arr = key.toCharArray();
                            String tabCount = "";
                            for(int i = 0; i < arr.length; i++) {
                                if(arr[i] == '\t'){
                                    tabCount += "\t";
                                }
                            }
                            
                            for(int i = 0; i < converted.size(); i++){
                                
                                if(i == 0) {
                                    file.set(currentIndex, tabCount + converted.get(i));
                                } else {
                                    file.add(currentIndex + i, tabCount + converted.get(i));
                                }
                            }
                        }
                    }
                    
                    logFileList.add("\nTernary operators coverted\n");
                    for(String key : fixedTernary.keySet()){
                        List<String> originalFile = eI.getOriginalFile();
                        //String line = key.substring(0, key.length()-1);
                        int indexOfLine = originalFile.indexOf(key);

                        logFileList.add("\n" + key.trim() + " : Line " + (indexOfLine + 1));
                    }
                    logFileList.add("\n\n-----------------------------------------------------------------------------------------------");

                }
            }
            
            //creating log file and fixed file
            File logFile = new File(".\\FixedFiles\\log.txt");
            File fixedFile = new File(fileName);
            
            logFile.createNewFile();
            
            //writing log file
            FileWriter writer1 = new FileWriter(".\\FixedFiles\\log.txt");
            
            for(String line: logFileList){
                writer1.write(line);
            }
            
            writer1.close();
            
            fixedFile.createNewFile();
            
            //writing fixed file
            FileWriter writer2 = new FileWriter(".\\FixedFiles\\" + fileName);
            
            for(String line: file){
                writer2.append(line + System.lineSeparator());
            }
            
            writer2.close();
            
            JOptionPane.showMessageDialog(rootPane, "Fixes applied successfully! \n Please check the FixedFiles folder in application directory for logs and fixed file.");
            
        } catch (Exception e){
            e.printStackTrace();
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    //get indexes of file that is being fixed
    public int getIndexOf(List<String> file, String find){
        try{
            
            for(String line : file){
                
                int index = file.indexOf(line);
                
                line = line.replaceAll("\n", "");
                line = line.replaceAll("\t", "");
                line = line.replaceAll("\\;", " ");
                line = line.replaceAll("\\,", " ");
                line = line.replaceAll("\\[", " ");
                line = line.replaceAll("\\]", " ");
                line = line.replaceAll("\\[]", " ");                
                line = line.replaceAll("\\(", " ");
                line = line.replaceAll("\\)", " ");
                line = line.replaceAll("\\.", " ");
                line = line.replaceAll("\\++", " ");
                line = line.replaceAll("\\--", " ");
                line = line.replaceAll("\\+=", " ");
                line = line.replaceAll("\\-=", " ");
                line = line.replaceAll("\\/=", " ");
                line = line.replaceAll("\\*=", " ");                
                line = line.replaceAll("\\=", "");
                line = line.replaceAll("\\?", " ");
                line = line.replaceAll("\\/", " ");
                line = line.replaceAll("\\%", " ");
                line = line.replaceAll("\\*", " ");
                line = line.replaceAll("\\:", " ");
                line = line.replaceAll("\\&", " ");
                line = line.replaceAll("\\>", " ");
                line = line.replaceAll("\\<", " ");
                line = line.replaceAll("\\|", " ");
                line = line.replaceAll("\\!=", " ");
                line = line.replaceAll("\\~", " ");
                line = line.replaceAll("\\+", " ");
                line = line.replaceAll("\\-", " ");
                line = line.replaceAll("\\!", " ");
                line = line.replaceAll("\\^", " ");
                line = line.replaceAll("\\{", " ");
                
                if(line.contains(find)){
                    return index;
                }
            }
            
        } catch (Exception e) {
            e.printStackTrace();
        }
        return -1;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FixIssues.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FixIssues.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FixIssues.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FixIssues.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FixIssues().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JCheckBox jCheckBox3;
    private javax.swing.JCheckBox jCheckBox4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables

}
