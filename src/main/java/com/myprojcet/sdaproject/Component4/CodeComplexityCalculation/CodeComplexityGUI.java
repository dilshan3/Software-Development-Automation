/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.myprojcet.sdaproject.Component4.CodeComplexityCalculation;

import javax.swing.JOptionPane;
import javax.swing.JFileChooser;
import java.nio.file.Paths;
import javax.swing.JFrame;

/**
 *
 * @author Prabuddha Abisheka
 */
public class CodeComplexityGUI extends javax.swing.JFrame {

    private String path;
    private String selectedFilePath;
    
    /**
     * Creates new form TestingCCGUI
     */
    public CodeComplexityGUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooser1 = new javax.swing.JFileChooser();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(640, 360));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setText("Code Complexity Calculator");

        jLabel2.setText("Please select the file you want to calculate code complexity.");

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jButton1.setText("Browse");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel3.setText("Select a complexity metric to calculcate.");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--- Select One---", "Line of Codes and Comments Complexity", "Size Complexity", "Recursion Complexity", "Control Stuctures Complexity", "Cyclomatic Complexity", "Cognitive Complexity", "Halstead Complexity" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jTextArea1.setEditable(false);
        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jTextArea1.setText("Please select a metric type to proceed with calculations.");
        jScrollPane1.setViewportView(jTextArea1);

        jButton2.setText("Calculate");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 342, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton1)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(351, Short.MAX_VALUE)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(326, 326, 326))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addGap(18, 18, 18)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 275, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    //This function is used to calculate complexity depending on the selected metric type
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        
        try {
            int index = this.jComboBox1.getSelectedIndex();
        
            //System.out.println(index);

            if(jTextField1.getText() != null && !jTextField1.getText().isEmpty()){
                
                Paths.get(this.jTextField1.getText());
                this.path = this.jTextField1.getText();
            
                switch(index){
                    case 0: {
                        JOptionPane.showMessageDialog(this.rootPane, "Please select a metric to calculate!");
                        break;
                    }
                    case 1: {
                        LineOfCodesComplexity lc = new LineOfCodesComplexity(this.selectedFilePath);
                        lc.formatFiles();
                        lc.calculateLOCComplexity();
                        LOCResults locR = new LOCResults(lc.getFixedFile(), lc.getLinebyLineSize(), lc.getCommentCount(), lc.getLength(), lc.getCommentPercentage());
                        locR.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
                        locR.setResizable(false);
                        locR.setTitle("Calculation Result");
                        locR.setVisible(true);
                        break;
                    }
                    case 2: {
                        ElemenetIdentifier e = new ElemenetIdentifier(this.selectedFilePath);
                        e.getSize();
                        SizeResults sr = new SizeResults(e.getFixedFile(), e.getLineByLineSize());
                        sr.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
                        sr.setResizable(false);
                        sr.setTitle("Calculation Result");
                        sr.setVisible(true);
                        break;
                    }
                    case 3: {
                        ElemenetIdentifier e = new ElemenetIdentifier(this.selectedFilePath);
                        e.getSize();
                        RecursiveResults sr = new RecursiveResults(e.getFixedFile(), e.getLineByLineSize(), e.getRecursionLineByLine());
                        sr.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
                        sr.setResizable(false);
                        sr.setTitle("Calculation Result");
                        sr.setVisible(true);
                        break;
                    }
                    case 4: {
                        ControlStructureComplexity csc = new ControlStructureComplexity(this.selectedFilePath);
                        csc.formatFiles();
                        csc.identifyControlStructures();
                        ControlStructureResult csr = new ControlStructureResult(csc.getFixedFile(), csc.getLineByLineSize());
                        csr.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
                        csr.setResizable(false);
                        csr.setTitle("Calculation Result");
                        csr.setVisible(true);
                        break;
                    }
                    case 5: {
                        CyclomaticComplexity cc = new CyclomaticComplexity(this.selectedFilePath);
                        cc.getMethods();
                        cc.getMethodPostision();
                        cc.calculateSizeKeywords();
                        CyclomaticResults cr = new CyclomaticResults(cc.getFixedFile(), cc.getLineByLineSize(), cc.getMethodPositions());
                        cr.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
                        cr.setResizable(false);
                        cr.setTitle("Calculation Result");
                        cr.setVisible(true);
                        break;
                    }
                    case 6: {
                        CognitiveComplexity cc = new CognitiveComplexity(this.selectedFilePath);
                        cc.formatFiles();
                        cc.calculateComplexity();
                        cc.getMethods();
                        cc.recursiveComplexity();
                        
                        CognitiveResults cr = new CognitiveResults(cc.getFixedFile(), cc.getLineByLineSize(), cc.getMethodPositions(), cc.getRecursionLineByLine());
                        cr.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
                        cr.setResizable(false);
                        cr.setTitle("Calculation Result");
                        cr.setVisible(true);
                        
                        break;
                    }
                    case 7: {
                        ElementIdentifierForHal hal = new ElementIdentifierForHal(this.selectedFilePath);
                        hal.calculateKeywords();
                        hal.getMethods();
                        
                        System.out.println("here1");
                        
                        HalsteadResults hr = new HalsteadResults(hal.getFixedFile(), hal.getOperandsArray(), hal.getOperatorsArray(), hal);
                        hr.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
                        hr.setResizable(false);
                        hr.setTitle("Calculation Result");
                        hr.setVisible(true);                        
                        break;
                    }
                    default: break;
                }
            }
            
        } catch (Exception e) {
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    //This is used for the browse button
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        this.btnBrowseActionPerformed(evt);
        
    }//GEN-LAST:event_jButton1ActionPerformed

    //This method is used to fill the text area with related details of the selected complexity metric.
    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:
        int index = this.jComboBox1.getSelectedIndex();
        
        System.out.println(index);
        
        switch(index){
            case 0: {
                this.jTextArea1.setText("");
                this.jTextArea1.append("Please select a metric to calculate!");
                break;
            }
            case 1: {
                //JOptionPane.showMessageDialog(this.rootPane, "Please select a metric to calculate!");
                this.jTextArea1.setText("");
                this.jTextArea1.append("Line of Code Complexity\n" + 
                        "----------------------------\n" +
                        "\n" +
                        "This metric calculates the complexity of a given code by calculating the ammount of actual code lines and comments to code percentage\n" +
                        "\n"+
                        "Function length should be 4 to 40 program lines.\n" + 
                        "\n" + 
                        "File length should be 4 to 400 program lines.\n" + 
                        "\n" + 
                        "At least 30 percent and at most 75 percent of a file should be comments.");
                break;
            }
            case 2: {
                this.jTextArea1.setText("");
                this.jTextArea1.append("Size Complexity\n" + 
                        "----------------------------\n" +
                        "\n" +
                        "This metric calculates the size for used keywords, special keywords, operands, operators, numbers, classes, objects and variables\n" + 
                        "\n" +
                        "Keyword weight: 1\n" +
                        "\n" +
                        "Special Keyword weight: 2\n" +
                        "\n" +
                        "Operators and operand weight: 1\n" +
                        "\n" +
                        "Other characters weight: 1\n");
                break;
            }
            case 3: {
                this.jTextArea1.setText("");
                this.jTextArea1.append("Recursion Complexity\n" + 
                        "----------------------------\n" +
                        "\n" +
                        "This metric calculates the complexity due to recursive methods in the code base size complexity is used to get the size of the function\n" + 
                        "\n" +
                        "Function size will be double if it's recursive\n");
                break;
            }
            case 4: {
                this.jTextArea1.setText("");
                this.jTextArea1.append("Control Stucture Complexity\n" + 
                        "----------------------------\n" +
                        "\n" +
                        "This metric calculates the complexity due to control structures used in the code\n" + 
                        "\n" +
                        "Control structure weight: 1\n");
                break;
            }
            case 5: {
                this.jTextArea1.setText("");
                this.jTextArea1.append("Cyclomatic Complexity\n" + 
                        "-----------------------------\n" + 
                        "\n" + 
                        "This metric is used to calculate the cyclomatic complexity of the code\n"+
                        "\n" +
                        "Methods have a base complexity of 1 weight\n" + 
                        "\n" + 
                        "+1 weight for every control flow statement (if, case, catch, throw, do, while, for, break, continue) and conditional expression (?:) \n" +
                        "\n" + 
                        "+1 weight for every boolean operator (&&, ||) in the guard condition of a control flow statement\n");
                break;
            }
            case 6: {
                this.jTextArea1.setText("");
                this.jTextArea1.append("Cognitive Complexity\n" + 
                        "-----------------------------\n" + 
                        "\n" + 
                        "This metric is used to calculate the cognitive complexity of the code\n" +
                        "\n" +
                        "Control stuctures have a base complexity of 1 weight\n" + 
                        "\n" + 
                        "+1 weight for every nesting of control structures (if, case, catch, throw, do, while, for, break, continue) and conditional expression (?:) \n" +
                        "\n" + 
                        "+1 weight for every boolean operator (&&, ||) in the guard condition of a control structure\n");
                break;
            }
            case 7: {
                this.jTextArea1.setText("");
                this.jTextArea1.append("Halstead Complexity\n" + 
                        "-----------------------------\n" + 
                        "\n" + 
                        "This metric is used to calculate the Halstead complexity of the code\n" +
                        "\n" +
                        "Complexity is calculated using the Operands and Operators used in the code" + 
                        "\n" + 
                        "Will provide information about: \n" +
                        "\n" + 
                        "\t Actual Length\n\t Estimated Length\n\t Program Vocabulary\n\t Program Volume\n\t Potential Minimum Volume\n\t Program Level\n\t Effort\n\t Programmer Time\n");
                break;
            }
            default: 
                this.jTextArea1.setText("");
                this.jTextArea1.append("Please select a metric to calculate!");
                break;
        }
    }//GEN-LAST:event_jComboBox1ActionPerformed

    //This method opens the browse window
    private void btnBrowseActionPerformed(java.awt.event.ActionEvent evt) {                                          
        this.jFileChooser1.setCurrentDirectory(new java.io.File("."));
        this.jFileChooser1.setDialogTitle("Choose File");
        this.jFileChooser1.setFileSelectionMode(JFileChooser.FILES_ONLY);
        if(this.jFileChooser1.showOpenDialog(this.jButton1) == JFileChooser.APPROVE_OPTION){
            this.selectedFilePath = this.jFileChooser1.getSelectedFile().getAbsolutePath();
            this.jTextField1.setText(this.selectedFilePath);
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CodeComplexityGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CodeComplexityGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CodeComplexityGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CodeComplexityGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CodeComplexityGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
